{"ast":null,"code":"import _objectSpread from \"/Users/guohanchao/Desktop/Programming/JR/Tutorials/card-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/guohanchao/Desktop/Programming/JR/Tutorials/card-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/guohanchao/Desktop/Programming/JR/Tutorials/card-game/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { cardImages } from \"../constants\";\nexport default function useGame() {\n  _s();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    cards = _useState2[0],\n    setCards = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    choiceOne = _useState4[0],\n    setChoiceOne = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    choiceTwo = _useState6[0],\n    setChoiceTwo = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    disabled = _useState8[0],\n    setDisabled = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    winner = _useState10[0],\n    setWinner = _useState10[1];\n  var shuffleCards = function shuffleCards() {\n    var shuffleCards = [].concat(_toConsumableArray(cardImages), _toConsumableArray(cardImages)).sort(function () {\n      return Math.random() - 0.5;\n    }).map(function (card) {\n      return _objectSpread(_objectSpread({}, card), {}, {\n        id: Math.random()\n      });\n    });\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffleCards);\n  };\n  var handleChoice = useCallback(function (card) {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  }, [choiceOne]);\n  var resetTurn = useCallback(function () {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setDisabled(false);\n  }, []);\n  useEffect(function () {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(function (prevCards) {\n          return prevCards.map(function (card) {\n            return card.src === choiceOne.src ? _objectSpread(_objectSpread({}, card), {}, {\n              matched: true\n            }) : card;\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(function () {\n          return resetTurn();\n        }, 500);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  useEffect(function () {\n    shuffleCards();\n  }, []);\n  useEffect(function () {\n    var unMatched = cards.filter(function (card) {\n      return card.matched === false;\n    });\n    unMatched.length ? setWinner(false) : setWinner(true);\n  }, [cards]);\n  return {\n    shuffleCards: shuffleCards,\n    cards: cards,\n    handleChoice: handleChoice,\n    choiceOne: choiceOne,\n    choiceTwo: choiceTwo,\n    disabled: disabled,\n    winner: winner\n  };\n}\n_s(useGame, \"AG6CMmRsosL0aLbu5BDg9BTcitU=\");","map":{"version":3,"names":["useState","useEffect","useCallback","cardImages","useGame","_s","_useState","_useState2","_slicedToArray","cards","setCards","_useState3","_useState4","choiceOne","setChoiceOne","_useState5","_useState6","choiceTwo","setChoiceTwo","_useState7","_useState8","disabled","setDisabled","_useState9","_useState10","winner","setWinner","shuffleCards","concat","_toConsumableArray","sort","Math","random","map","card","_objectSpread","id","handleChoice","resetTurn","src","prevCards","matched","setTimeout","unMatched","filter","length"],"sources":["/Users/guohanchao/Desktop/Programming/JR/Tutorials/card-game/src/hooks/useGame.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { cardImages } from \"../constants\";\n\nexport default function useGame() {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [choiceOne, setChoiceOne] = useState<Card | null>(null);\n  const [choiceTwo, setChoiceTwo] = useState<Card | null>(null);\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [winner, setWinner] = useState<boolean>(false);\n\n  const shuffleCards = () => {\n    const shuffleCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffleCards);\n  };\n\n  const handleChoice = useCallback(\n    (card: Card) => {\n      choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    },\n    [choiceOne]\n  );\n\n  const resetTurn = useCallback(() => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setDisabled(false);\n  }, []);\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards) =>\n          prevCards.map((card) =>\n            card.src === choiceOne.src ? { ...card, matched: true } : card\n          )\n        );\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 500);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  useEffect(() => {\n    const unMatched = cards.filter((card) => card.matched === false);\n    unMatched.length ? setWinner(false) : setWinner(true);\n  }, [cards]);\n\n  return {\n    shuffleCards,\n    cards,\n    handleChoice,\n    choiceOne,\n    choiceTwo,\n    disabled,\n    winner\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}